package Synchronized;import java.util.HashMap;import java.util.Hashtable;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class CountDownLatchTest {    public static void main(String[] args) {        ExecutorService executorService = Executors.newFixedThreadPool(6);        CountDownLatch startSignal = new CountDownLatch(1);        CountDownLatch endSignal = new CountDownLatch(6);        for (int i = 1; i <= 6; i++) {            executorService.submit(new Runnable() {                @Override                public void run() {                    try {                        startSignal.await();                        System.out.println(Thread.currentThread() + "起跑");                        Thread.sleep(3000);                        System.out.println(Thread.currentThread() + "跑到了终点");                        endSignal.countDown();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }, "线程" + i);        }        System.out.println("裁判吹哨,开始比赛");        HashMap map = new HashMap();        map.put("ddf", null);        System.out.println(map.get("ddf"));        startSignal.countDown();        try {            endSignal.await();            System.out.println("比赛结束");        } catch (InterruptedException e) {            e.printStackTrace();        }        executorService.shutdown();    }}