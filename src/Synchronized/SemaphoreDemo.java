package Synchronized;import java.util.concurrent.Semaphore;import java.util.concurrent.TimeUnit;class StopCar {    Semaphore semaphore = new Semaphore(3);    public void into() {        try {            semaphore.acquire();            System.out.println(Thread.currentThread().getName()+"抢到了车位。。。");            try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) {e.printStackTrace(); }            System.out.println(Thread.currentThread().getName()+"停车3秒后；离开。。。");        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            semaphore.release();        }    }}class Job implements Runnable{    StopCar stopCar;    public Job(StopCar stopCar) {        this.stopCar = stopCar;    }    @Override    public void run() {        stopCar.into();    }}public class SemaphoreDemo {    public static void main(String[] args) {        StopCar stopCar = new StopCar();        Thread thread[] = new Thread[10];        for (int i = 0; i < 10; i++) {            thread[i] = new Thread(new Job(stopCar), "Thread" + i);        }// 开始这10个线程。        for (int i = 0; i < 10; i++) {            thread[i].start();        }    }}