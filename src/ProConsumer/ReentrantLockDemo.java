package ProConsumer;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;class MyReenCondition {    private int number;    private ReentrantLock reentrantLock = new ReentrantLock();    private Condition condition = reentrantLock.newCondition();    public void increment() {        reentrantLock.lock();        try {            while (number != 0) {                condition.await();            }            number++;            System.out.println(Thread.currentThread().getName() + "\t" + number);            condition.signalAll();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            reentrantLock.unlock();        }    }    public void decrement () {        reentrantLock.lock();        try {            while (number == 0) {                condition.await();            }            number --;            System.out.println(Thread.currentThread().getName() + "\t" + number);            condition.signalAll();        }catch (Exception e) {            e.printStackTrace();        }finally {            reentrantLock.unlock();        }    }}public class ReentrantLockDemo {    public static void main(String[] args) {        MyReenCondition myCondition = new MyReenCondition();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 10; i++) {                    myCondition.increment();                }            }        },"A").start();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 10; i++) {                    myCondition.decrement();                }            }        },"B").start();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 10; i++) {                    myCondition.increment();                }            }        },"C").start();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 10; i++) {                    myCondition.decrement();                }            }        },"D").start();    }}