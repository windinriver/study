package ProConsumer;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;class ShareData {    private int number = 1;    ReentrantLock lock = new ReentrantLock();    Condition condition1 = lock.newCondition();    Condition condition2 = lock.newCondition();    Condition condition3 = lock.newCondition();    public void printc5() {        lock.lock();        try {            while (number != 1) {                condition1.await();            }            for (int i = 0; i < 5; i++) {                System.out.println(Thread.currentThread().getName());            }            number=2;            condition2.signal();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }    public void printc10() {        lock.lock();        try {            while (number != 2) {                condition2.await();            }            for (int i = 0; i < 10; i++) {                System.out.println(Thread.currentThread().getName());            }            number=3;            condition3.signal();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }    public void printc15() {        lock.lock();        try {            while (number != 3) {                condition3.await();            }            for (int i = 0; i < 10; i++) {                System.out.println(Thread.currentThread().getName());            }            number=1;            condition1.signal();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }}public class ConditionDemo {    public static void main(String[] args) {        ShareData shareData = new ShareData();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 5; i++) {                    shareData.printc5();                }            }        }, "A").start();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 5; i++) {                    shareData.printc10();                }            }        }, "B").start();        new Thread(new Runnable() {            @Override            public void run() {                for (int i = 0; i < 5; i++) {                    shareData.printc15();                }            }        }, "C").start();    }}